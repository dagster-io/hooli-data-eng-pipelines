name: Dagster Cloud Hybrid Deployment
on:
  push: # For full deployment
    branches:
      - "gtm20"
  pull_request:  # For branch deployments
     types: [opened, synchronize, reopened, closed]

concurrency:
  # Cancel in-progress deploys to the same branch
  group: ${{ github.ref }}
  cancel-in-progress: true
env:
  DAGSTER_CLOUD_ORGANIZATION: "hooli"
  DAGSTER_CLOUD_API_TOKEN: ${{ secrets.DAGSTER_CLOUD_API_TOKEN }}
  DAGSTER_PROJECT_DIR: "."
  DAGSTER_CLOUD_YAML_PATH: "dagster_cloud.yaml"
  # The IMAGE_REGISTRY should match the registry: in dagster_cloud.yaml
  IMAGE_REGISTRY: "764506304434.dkr.ecr.us-west-2.amazonaws.com/hooli-data-science-prod"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  dagster-cloud-deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Pre-run checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1.47

      - name: Checkout
        uses: actions/checkout@v4
        if: steps.prerun.outputs.result != 'skip'
        with:
          ref: ${{ github.head_ref }}

      - name: Run Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: check --fix

      - name: Get changed files
        id: changed-files
        uses: step-security/changed-files@3dbe17c78367e7d60f00d78ae6781a35be47b4a1 # v45.0.1
        with:
          files_yaml: |
            hooli-data-eng:
              - dbt_project/**
              - hooli-data-eng/**
            hooli-etl-pipeline:
              - hooli-etl-pipeline/**
            hooli-basics:
              - hooli-basics/**
            hooli-data-ingest:
              - hooli-data-ingest/**
            hooli-interoperability:
              - hooli-interoperability/**
            hooli-ai:
              - hooli-ai/**
            hooli-ml:
              - hooli-ml/**

      - name: Generate docker image tag
        id: generate-image-tag
        if: steps.prerun.outputs.result != 'skip'
        run: |
          echo "IMAGE_TAG=$GITHUB_SHA-$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV && echo $IMAGE_TAG
      
      - name: Set branch deployment env variable flag
        id: set-branch-deployment-env
        if: steps.prerun.outputs.result != 'skip' && github.event_name == 'pull_request'
        run: |
          echo "DAGSTER_CLOUD_IS_BRANCH_DEPLOYMENT=1" >> $GITHUB_ENV && echo $DAGSTER_CLOUD_IS_BRANCH_DEPLOYMENT

      - name: Get Code locations that changed
        id: extract-changed-dirs
        run: |
              changed_files="${{ steps.changed-files.outputs.hooli-data-eng_all_changed_files }} ${{ steps.changed-files.outputs.hooli-basics_all_changed_files }} ${{ steps.changed-files.outputs.hooli-interoperability_all_changed_files }} ${{ steps.changed-files.outputs.hooli-etl-pipeline_all_changed_files }}"
              filtered_dirs=$(echo $changed_files | tr ' ' '\n' | xargs -n1 dirname | sort | uniq)
              echo $changed_files
              echo $filtered_dirs
              LOCATIONS=""
              LOCATIONS_WITH_IMAGE=""
              if [ "${{ steps.changed-files.outputs.hooli-data-eng_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name data-eng-pipeline"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name data-eng-pipeline --image-tag=$IMAGE_TAG-data-eng-pipeline\n"
              fi
              if [ "${{ steps.changed-files.outputs.hooli-etl-pipeline_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name hooli_etl_pipeline"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name hooli_etl_pipeline --image-tag=$IMAGE_TAG-hooli-etl-pipeline\n"
              fi
              if [ "${{ steps.changed-files.outputs.hooli-basics_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name basics"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name basics --image-tag=$IMAGE_TAG-basics\n"
              fi
              if [ "${{ steps.changed-files.outputs.hooli-interoperability_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name hooli_interoperability"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name hooli_interoperability --image-tag=$IMAGE_TAG-hooli-interoperability"
              fi
              if [ "${{ steps.changed-files.outputs.hooli-ai_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name hooli_ai"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name hooli_ai --image-tag=$IMAGE_TAG-hooli-ai"
              fi
              if [ "${{ steps.changed-files.outputs.hooli-ml_any_changed}}" == "true" ]; then
                LOCATIONS="$LOCATIONS --location-name hooli_ml"
                LOCATIONS_WITH_IMAGE="$LOCATIONS_WITH_IMAGE dagster-cloud ci set-build-output --location-name hooli_ml --image-tag=$IMAGE_TAG-hooli-ml"
              fi
              echo $LOCATIONS
              echo $LOCATIONS_WITH_IMAGE
              echo "LOCATIONS=$LOCATIONS" >> $GITHUB_ENV
              echo "LOCATIONS_WITH_IMAGE=$LOCATIONS_WITH_IMAGE" >> $GITHUB_ENV

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-local-path: ".github/python_dependencies"

      - name: Install python dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install dagster-dbt dagster-cloud dbt-core dbt-duckdb "dbt-snowflake<=1.8.4" dagster-dg-cli dagster dagster-snowflake dagster-duckdb --upgrade;

      - name: Validate configuration
        id: ci-validate
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.47
        with:
          command: "ci check --project-dir ${{ env.DAGSTER_PROJECT_DIR }} --dagster-cloud-yaml-path ${{ env.DAGSTER_CLOUD_YAML_PATH }}"

      - name: Initialize build session
        id: ci-init
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/ci-init@v0.1.47
        with:
          project_dir: ${{ env.DAGSTER_PROJECT_DIR }}
          dagster_cloud_yaml_path: ${{ env.DAGSTER_CLOUD_YAML_PATH }}
          deployment: 'gtm20'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: steps.prerun.outputs.result != 'skip'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  us-west-2

      - name: Login to ECR
        if: ${{ steps.prerun.outputs.result != 'skip' }}
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set Prod Deployment Environment Variable for Push
        if: steps.prerun.outputs.result != 'skip' && github.event_name == 'push'
        run: echo "DAGSTER_CLOUD_DEPLOYMENT_NAME=gtm20" >> $GITHUB_ENV

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/hooli-data-eng:$(pwd)/hooli-etl-pipeline/src/" >> $GITHUB_ENV

      - name: Prepare dbt project for hooli-data-eng
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-data-eng_any_changed == 'true'
        run: |
          source .venv/bin/activate
          dagster-dbt project prepare-and-package --file hooli-data-eng/hooli_data_eng/defs/dbt/resources.py
          dagster-cloud ci dagster-dbt project manage-state --file hooli-data-eng/hooli_data_eng/defs/dbt/resources.py --source-deployment gtm20

      - name: Prepare dbt project for hooli-etl-pipeline
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-etl-pipeline_any_changed == 'true'
        run: |
          source .venv/bin/activate
          dagster-dbt project prepare-and-package --components hooli-etl-pipeline
          dagster-cloud ci dagster-dbt project manage-state --components hooli-etl-pipeline --source-deployment gtm20

      - name: Build and upload Docker image for data-eng-pipeline
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-data-eng_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./hooli-data-eng/Dockerfile
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-data-eng-pipeline

      # Build 'hooli etl pipeline' code location
      - name: Build and upload Docker image for etl pipeline
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-etl-pipeline_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-etl-pipeline
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-hooli-etl-pipeline

      # Build 'basics' code location
      - name: Build and upload Docker image for basics
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-basics_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-basics
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-basics


      # Build 'hooli_interoperability' code location
      - name: Build and upload Docker image for hooli_interoperability
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-interoperability_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-interoperability
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-hooli-interoperability

      # Build 'hooli_ai' code location
      - name: Build and upload Docker image for hooli_ai
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-ai_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-ai
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-hooli-ai

      # Build 'hooli_ml' code location
      - name: Build and upload Docker image for hooli_ml
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-ml_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-ml
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-hooli-ml

      # Build pipes example container
      - name: Build and upload Docker image for pipes example
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-data-eng_any_changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./hooli-data-eng/hooli_data_eng/utils/example_container
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:latest-pipes-example

      # Install Databricks CLI and deploy bundle for hooli-ml
      - name: Install Databricks CLI
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-ml_any_changed == 'true'
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH

      - name: Deploy Databricks Bundle (Staging)
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-ml_any_changed == 'true' && github.event_name == 'pull_request'
        working-directory: ./hooli-ml/databricks_mlops/databricks_mlops
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks bundle deploy -t staging

      - name: Deploy Databricks Bundle (Production)
        if: steps.prerun.outputs.result != 'skip' && steps.changed-files.outputs.hooli-ml_any_changed == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/gtm20'
        working-directory: ./hooli-ml/databricks_mlops/databricks_mlops
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks bundle deploy -t prod

      #set build output
      - name: Set build output for Dagster Cloud
        id: ci-set-build-output
        if: steps.prerun.outputs.result != 'skip'
        run: |
          source .venv/bin/activate
          # Iterate through each line in LOCATIONS_WITH_IMAGE and execute it
          echo -e "$LOCATIONS_WITH_IMAGE" | while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "Executing: $line"
              eval "$line"
            fi
          done
        # uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.47
        # with:
        #   command: "ci set-build-output $LOCATIONS_WITH_IMAGE"
      #Deploy
      - name: Deploy to Dagster Cloud
        id: ci-deploy
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.47
        with:
         command: "ci deploy $LOCATIONS"

      # Get branch deployment as input to job trigger below
      - name: Get branch deployment
        id: get-branch-deployment
        if: steps.prerun.outputs.result != 'skip' && github.event_name == 'pull_request'
        uses: dagster-io/dagster-cloud-action/actions/utils/get_branch_deployment@v0.1
        with:
          organization_id: 'hooli'

      # Trigger dbt slim CI job
      - name: Trigger dbt slim CI
        if: steps.prerun.outputs.result != 'skip' && github.event_name == 'pull_request' && steps.changed-files.outputs.hooli-bi_any_changed == 'true'
        uses: dagster-io/dagster-cloud-action/actions/utils/run@v0.1
        with:
          location_name: data-eng-pipeline
          deployment: ${{ steps.get-branch-deployment.outputs.deployment }}
          job_name: dbt_slim_ci_job
          organization_id: hooli

      # Summary and comment updates - note these always() run
      - name: Update PR comment for branch deployments
        id: ci-notify
        if: steps.prerun.outputs.result != 'skip' && always()
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.47
        with:
          command: "ci notify --project-dir=${{ env.DAGSTER_PROJECT_DIR }}"

      - name: Generate summary
        id: ci-summary
        if: steps.prerun.outputs.result != 'skip' && always()
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.47
        with:
          command: "ci status --output-format=markdown >> $GITHUB_STEP_SUMMARY"
