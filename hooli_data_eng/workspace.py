from pathlib import Path

from dagster_sdf import SdfWorkspace, SdfCliResource
# from dagster_sdf.sdf_workspace import DagsterSdfWorkspacePreparer
# from dagster._utils import run_with_concurrent_update_guard


RELATIVE_PATH_TO_MY_SDF_WORKSPACE = Path(__file__).parent.parent.joinpath("sdf_workspace")
workspace_dir = Path(__file__).joinpath("..", RELATIVE_PATH_TO_MY_SDF_WORKSPACE).resolve()
target_dir = workspace_dir.joinpath("sdf_dagster_out") # The destination for outputs generated by SDF during execution
environment = "dbg" # Replace with your environment, e.g. "prod"

# class CustomDagsterSdfWorkspacePreparer(DagsterSdfWorkspacePreparer):
#     def prepare(self, workspace: Path) -> None:
#         output_dir = workspace.target_dir.joinpath("sdftarget", workspace.environment)
#         run_with_concurrent_update_guard(
#             output_dir,
#             self._prepare_workspace,
#             workspace=workspace,
#         )
#         super().prepare(workspace)

#     def _prepare_workspace(self, workspace: "SdfWorkspace") -> None:
#         (
#             SdfCliResource(workspace_dir=workspace)
#             .cli(
#                 self._generate_cli_args,
#                 target_dir=workspace.target_dir,
#                 environment=workspace.environment,
#                 raise_on_error=False,
#             )
#             .wait()
#         )
#         (
#             SdfCliResource(workspace_dir=workspace)
#             .cli(
#                 ["compile", "--save", "table-deps"],
#                 target_dir=workspace.target_dir,
#                 environment=workspace.environment,
#                 raise_on_error=False,
#             )
#             .wait()
#         )
#         (
#             SdfCliResource(workspace_dir=workspace)
#             .cli(
#                 ["compile", "--save", "info-schema"],
#                 target_dir=workspace.target_dir,
#                 environment=workspace.environment,
#                 raise_on_error=False,
#             )
#             .wait()
#         )


workspace = SdfWorkspace(
    workspace_dir=workspace_dir,
    target_dir=target_dir,
    environment=environment,
    #workspace_preparer=CustomDagsterSdfWorkspacePreparer(),
)

